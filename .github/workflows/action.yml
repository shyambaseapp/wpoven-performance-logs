name: "action"
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
      - "releases/*"

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      WP_PATH: /var/www/html
      PLUGIN_PATH: /var/www/html/wp-content/plugins/wpoven-performance-logs

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install PHP 8.0
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository ppa:ondrej/php -y
          sudo apt-get update
          sudo apt-get install -y php8.0 php8.0-cli php8.0-fpm php8.0-mbstring php8.0-xml php8.0-mysql

      - name: Verify PHP Installation
        run: php -v

      - name: Start MySQL service
        run: sudo service mysql start

      - name: Download WordPress
        run: |
          wget https://wordpress.org/latest.tar.gz
          tar -xzf latest.tar.gz
          sudo mv wordpress/* $WP_PATH
          sudo cp $WP_PATH/wp-config-sample.php $WP_PATH/wp-config.php
          sudo sed -i "s/database_name_here/wordpress_test/" $WP_PATH/wp-config.php
          sudo sed -i "s/username_here/root/" $WP_PATH/wp-config.php
          sudo sed -i "s/password_here/root/" $WP_PATH/wp-config.php
          mysql -u root --password=root -e "CREATE DATABASE wordpress_test"
          sudo chmod -R 755 $WP_PATH
          sudo service apache2 start

      - name: Install WP-CLI
        run: |
          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          chmod +x wp-cli.phar
          sudo mv wp-cli.phar /usr/local/bin/wp

      - name: Install WordPress
        env:
          ADMIN_USER: admin
          ADMIN_PASSWORD: ${{ secrets.WP_ADMIN_PASSWORD }}
          ADMIN_EMAIL: admin@example.com
        run: |
          cd $WP_PATH
          wp core install --url="http://localhost" \
                          --title="Test Site" \
                          --admin_user="$ADMIN_USER" \
                          --admin_password="$ADMIN_PASSWORD" \
                          --admin_email="$ADMIN_EMAIL"

      - name: Clone the plugin repository
        run: |
          sudo mkdir -p $PLUGIN_PATH
          sudo git clone https://github.com/shyambaseapp/wpoven-performance-logs.git $PLUGIN_PATH
          cd $PLUGIN_PATH
          sudo git submodule update --init --recursive
          sudo chown -R www-data:www-data $PLUGIN_PATH

      - name: Activate the plugin
        run: |
          cd $WP_PATH
          wp plugin activate wpoven-performance-logs 

      - name: Run plugin check
        uses: wordpress/plugin-check-action@v1
        with: 
          exclude-checks: |
            i18n_usage
            late_escaping
          exclude-files: |
           .gitignore
           .gitmodules
          exclude-directories: |
            redux-framework
            plugin-update-checker
        env:
          PLUGIN_DIR: /var/www/html/wp-content/plugins/wpoven-performance-logs
          PLUGIN_SLUG: wpoven-performance-logs
          WP_VERSION: latest
      # New step: Check if WordPress is still accessible after plugin activation
      - name: Check Plugin Dashboard Accessibility
        env:
          ADMIN_USER: admin
          ADMIN_PASSWORD: ${{ secrets.WP_ADMIN_PASSWORD }}
        run: |
          PLUGIN_SLUG="wpoven-performance-logs"  # Replace with your plugin slug
          DASHBOARD_URL="http://localhost/wp-admin/admin.php?page=$PLUGIN_SLUG"

          STATUS=$(curl -s -o /dev/null -w "%{http_code}" --user "$ADMIN_USER:$ADMIN_PASSWORD" $DASHBOARD_URL)
          if [ $STATUS -ne 200 ]; then
            echo "Plugin dashboard is not accessible. Status code: $STATUS"
            exit 1
          else
            echo "Plugin dashboard is accessible. Status code: $STATUS"
          fi

      # New step: Ensure plugin is active without errors
      - name: Ensure plugin is active
        run: |
          cd $WP_PATH
          wp plugin is-active wpoven-performance-logs